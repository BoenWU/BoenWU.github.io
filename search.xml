<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2F2017%2F06%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[ionic2学习笔记]]></title>
    <url>%2Fblog%2F2017%2F04%2F18%2Fionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Ionic(ionicframework)一款接近原生的HTML5移动App开发框架。 IONIC 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。 它使用 JavaScript MVVM 框架和AngularJS 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。Ionic是一个专注于用WEB开发技术，基于HTML5创建类似于手机平台原生应用的一个开发框架。Ionic框架的目的是从web的角度开发手机应用，基于PhoneGap的编译平台，可以实现编译成各个平台的应用程序。 注意：这里讲的是ionic2的知识点，毕竟它与ionic 1.0有着较显著的区别。 Ionic 的安装与运行1、 下载安装 Node.js，可以在命令行中使用node–v 命令查看当前安装的node.js的版本； 2、 使用 npm install ionic –g命令可以安装Ionic，不过需要注意的是此时安装的版本为Ionic 1.0版本。可以使用npm install ionic@beta–g 安装beta版本，如可以使用npm installionic@2.0.0-beta.22 –g安装beta.22版本； 3、 安装Ionic 后，可以使用 ionic start ionicdemo –v2初始化一个空项目，默认采用tabs template作为初始化项目的模板，如果需要其他的模板，那么在项目名称后面添加上对应的模板名称即可，如：ionic start ionicdemo tutorial –v2；（–v2参数明确了使用2.0版本去初始化项目） 4、 使用 ionic serve可以运行Ionic项目； 5、 使用 ionic platform add Android或ionic platform add iOS命令可以添加两个手机平台的部署文件（使用ionicplatform list 命令可以查看当前的平台信息）； 6、 在项目中添加了两个平台的部署文件，可以通过platform文件夹下进行查看，相应地，在Xcode导入ios部署文件或在Android studio导入Android部署文件，可以进行相应地真机调试； Ionic页面的生命周期1234567891011121314151617181920212223242526272829303132333435// 页面被加载完成后调用的函数，切换页面时并不会进行重新加载，因为有cache的存在 onPageLoaded() &#123; console.log(&apos;page 1: page loaded.&apos;); &#125; // 页面即将进入的时候 onPageWillEnter() &#123; // 在这里可以做页面初始化的一些事情 console.log(&apos;page 1: page will enter.&apos;); &#125; // 页面已经进入的时候 onPageDidEnter() &#123; console.log(&apos;page 1: page did enter.&apos;); &#125; // 页面即将离开的时候 onPageWillLeave() &#123; console.log(&apos;page 1: page will leave.&apos;); &#125; // 页面已经离开的时候 onPageDidLeave() &#123; console.log(&apos;page 1: page did leave.&apos;); &#125; // 从 DOM 中移除的时候执行的生命周期 onPageWillUnload() &#123; &#125; // 从 DOM 中移除执行完成的时候 onPageDidUnload() &#123; &#125; Ionic组件1、Tab控件 图标：http://ionicframework.com/docs/v2/ionicons/ tabs.html12345678910111213141516171819202122232425262728&lt;ion-tabs&gt; &lt;ion-tab [root]=&quot;tab1Root&quot; tabTitle=&quot;Home&quot; tabIcon=&quot;home&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab2Root&quot; tabTitle=&quot;About&quot; tabIcon=&quot;information-circle&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab3Root&quot; tabTitle=&quot;Contact&quot; tabIcon=&quot;contacts&quot;&gt;&lt;/ion-tab&gt; &lt;/ion-tabs&gt; &lt;ion-tabs&gt; &lt;ion-tab [root]=&quot;tab1Root&quot; tabTitle=&quot;Home&quot; tabIcon=&quot;home&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab2Root&quot; tabTitle=&quot;About&quot; tabIcon=&quot;information-circle&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab3Root&quot; tabTitle=&quot;Contact&quot; tabIcon=&quot;contacts&quot; tabBadge=&quot;3&quot;&gt;&lt;/ion-tab&gt; &lt;/ion-tabs&gt; &lt;ion-tabs&gt; &lt;ion-tab [root]=&quot;tab1Root&quot; tabTitle=&quot;Home&quot; tabIcon=&quot;home&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab2Root&quot; tabTitle=&quot;About&quot; tabIcon=&quot;information-circle&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab3Root&quot; tabTitle=&quot;Contact&quot; tabIcon=&quot;contacts&quot; tabBadge=&quot;3&quot; tabBadgeStyle=&quot;danger&quot;&gt;&lt;/ion-tab&gt; &lt;/ion-tabs&gt; 默认首先进入第三个tab页面： Html控制 12345678910&lt;ion-tabs selectedIndex=&quot;2&quot;&gt; &lt;ion-tab [root]=&quot;tab1Root&quot; tabTitle=&quot;Home&quot; tabIcon=&quot;home&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab2Root&quot; tabTitle=&quot;About&quot; tabIcon=&quot;information-circle&quot;&gt;&lt;/ion-tab&gt; &lt;ion-tab [root]=&quot;tab3Root&quot; tabTitle=&quot;Contact&quot; tabIcon=&quot;contacts&quot; tabBadge=&quot;3&quot; tabBadgeStyle=&quot;danger&quot;&gt;&lt;/ion-tab&gt; &lt;/ion-tabs&gt; ~~~ JS控制 import {Component} from ‘@angular/core’;import {HomePage} from ‘../home/home’;import {AboutPage} from ‘../about/about’;import {ContactPage} from ‘../contact/contact’; import {Tabs} from ‘ionic-angular’;import {Injectable, ViewChild} from ‘@angular/core’; @Component({ templateUrl: ‘build/pages/tabs/tabs.html’})export class TabsPage { @ViewChild(‘mainTabs’) tabRef: Tabs; private tab1Root: any; private tab2Root: any; private tab3Root: any; constructor() { // this tells the tabs component which Pages // should be each tab’s root Page this.tab1Root = HomePage; this.tab2Root = AboutPage; this.tab3Root = ContactPage; } ionViewDidEnter() { this.tabRef.select(2); }}122、Button控件 Basic ButtonGray ButtonDanger ButtonOutline ButtonClear ButtonRound ButtonBlock ButtonSmall ButtonLarge Button Button Button 123456 3、Input控件 用户名 密码 登录 export class ContactPage { public user = { username: ‘parry’, password: ‘’ }; constructor(private navCtrl: NavController) { } showFill() { alert(this.user.username); console.log(this.user.password); }}124、Loading控件、Alert控件 import { Component } from ‘@angular/core’;import { NavController,LoadingController,AlertController } from ‘ionic-angular’; @Component({ selector: ‘page-home’, templateUrl: ‘home.html’})export class HomePage { public user = { username: ‘’, password: ‘’ }; constructor(public navCtrl: NavController, public loadingCtrl: LoadingController, public alertCtrl: AlertController) { } login(){ if(this.user.username == ‘’){ let alertUsernameError = this.alertCtrl.create({ title: ‘用户中心’, subTitle: ‘用户名不能为空’, buttons: [‘OK’] }); alertUsernameError.present(); }else{ let loading = this.loadingCtrl.create({ content: “正在登陆”, duration: 3000 }); loading.present(); } }}125、Toast控件 // 2. 使用 Toast 控件let toast = this.toastCtrl.create({ message: ‘输入的用户名格式不正确！’, duration: 3000,});toast.present();126、Grid布局 还没有账号？点击注册 127、 modal控件 // 导入注册页面import {Register} from ‘../contact/register’; // 打开注册页面openRegisterPage() { let modal = this.modalCtrl.create(Register); modal.present();} import {Component} from ‘@angular/core’; @Component({ templateUrl: ‘build/pages/contact/register.html’})export class Register { }128、 Toolbar控件 用户注册 取消 修改： 用户注册 取消 Parameters passed:129、 List控件 哈哈 (ˇˍˇ) 想～ 美女 (ˇˍˇ) 想～ 绑定数据源： 数据源的声明 // 一般数据源都是从 api 进行获取，这里我们只是模拟一些已经取到了数据public contacts = [ {‘contactid’: 1, ‘contactname’: ‘梦小白’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 2, ‘contactname’: ‘梦小白2’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 3, ‘contactname’: ‘梦小白3’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 4, ‘contactname’: ‘梦小白4’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 5, ‘contactname’: ‘梦小白5’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 6, ‘contactname’: ‘梦小白6’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 1, ‘contactname’: ‘梦小白7’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 2, ‘contactname’: ‘梦小白8’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 3, ‘contactname’: ‘梦小白9’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 4, ‘contactname’: ‘梦小白10’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 5, ‘contactname’: ‘梦小白11’, ‘contacttext’: ‘18888888888’}, {‘contactid’: 6, ‘contactname’: ‘梦小白12’, ‘contacttext’: ‘18888888888’},]; 1210、卡片布局 Elon Musk 来自 iPhone 6s 我又发布了一辆新车，上天入地舍我其谁？呵呵 888 赞 600 评论 1小时前 1211、navigation控件 itemClick(event, contact) { //console.log(event); //console.dirxml(contact); //alert(contact.contactname); this.navCtrl.push(ContactDetails, {item: contact});} ContactDetails页面 /** Created by Administrator on 2016/8/23 0023.*/import {Component} from ‘@angular/core’;import {NavParams} from ‘ionic-angular’; @Component({ templateUrl: ‘build/pages/about/contactdetails.html’})export class ContactDetails { private item = ‘’; constructor(public params: NavParams) { this.item = params.data.item; }} 的手机号码为：12345678910 ### Cordova组件介绍1、Image Picker组件 2、Geolocation组件 // 获取位置信息Geolocation.getCurrentPosition().then((resp) =&gt; { console.log(resp.coords.latitude); console.log(resp.coords.longitude);});1234 3、Local Notifications组件 // 本地提醒组件LocalNotifications.schedule({ text: ‘本地化提醒-您启动了Ionic App’, at: new Date(new Date().getTime() + 10000), sound: null});123456789101112131415161718### 项目实战1、快速生成App图标和启动页面MakeAppiconIos.hvims.comLauncher Icon Generatoriconhandbook.co.uk/reference/chart/android 2、使用localStorage存储状态信息 localStorage.setItem(key, value) localStorage.getItem(key) 注：Modal页面的关闭需要使用到ViewController中的dismiss方法。1234567 3、Modal关闭后父页面的概念和方法 4、Ionic中的网络请求 跨域请求问题： http://enable-cors.org/ （当然在App中不会出现，只会在浏览器调试的过程中出现） // 这里是请求 API 的实现，注意跨域请求的问题，请参见 http://enable-cors.org/this.http.get(‘http://xxx/account/Login?email=‘ + this.user.username + ‘&amp;password=’ + this.user.password) .subscribe(data =&gt; { let res = data.json(); if(res.LoginStatus == 1) { localStorage.setItem(‘username’, this.user.username); localStorage.setItem(‘logined’, ‘true’); //自身 modal 隐藏 this.viewCtrl.dismiss(this.user.username); loading.dismiss(); //登录进度隐藏 } else { let toast = this.toastCtrl.create({ message: ‘登录失败！’, duration: 2000, }); toast.present(); } }, err =&gt; { let toast = this.toastCtrl.create({ message: ‘登录失败！’, duration: 2000, }); toast.present(); });1234 5、List中滑动删除数据 删除 126、集成极光推送实现消息推送 // 设置客户端的别名，用于定向接收消息的推送 window.plugins.jPushPlugin.setAlias(‘Client’ + loginResult.UserId); // Client（只能是单一值）：单独的一台设备绑定到jPush，就相当于设备的ID号码，server端推送的时候只能推送到ID级别的。 var arrayObj = new Array(‘Tags’ + loginResult.UserId); window.plugins.jPushPlugin.setTags(arrayObj); //Tags：其实就是分组的意思，那么这样指定后，在用户登录的时候 分配一个分组名给用户，那么推送消息的时候，就可以推送给这个分组。 应用场景：如果用户有多个设备，并且这些设备上可以同时登录app，那么我们推送消息应该推送给这几个设备。~~~ //Client – 1，只是这一台设备收到通知。 //Tag – 1，多台设备都设置叫 Tag – 1。 7、iOS打包与AppStore上架 8、Android打包与发布 参考学习： https://babeljs.io http://kangax.github.io/compat-table/es6/ https://github.com/driftyco https://github.com/driftyco/ionic-preview-app/ http://www.typescriptlang.org/docs/ http://mhartington.io/post/ionic2-external-libraries]]></content>
      <categories>
        <category>hybrid</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为next主题添加nest背景特效]]></title>
    <url>%2Fblog%2F2017%2F03%2F25%2F%E4%B8%BAnext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0nest%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[背景的几何线条是采用的nest效果，一个基于html5 canvas绘制的网页背景效果，非常赞！来自github的开源项目canvas-nest 特性 不依赖任何框架或者内库，比如不依赖jQuery，使用原生的javascript。 非常小，只有1.66kb，如果开启gzip，可以更小。 非常容易实现，配置简单，即使你不是web开发者，也能简单搞定。 使用 使用非常简单，感觉都没有必要写这一节内容。 修改_layout.swig打开next/layout/_layout.swig将下面的代码插入到 之前.1&lt;script type=&quot;text/javascript&quot; color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; 至此，大功告成，运行hexo clean 和 hexo g hexo s之后就可以看到效果了。 配置和配置项 color : 线条颜色, 默认: ‘0,0,0’ ；三个数字分别为(R,G,B)，注意用,分割 opacity : 线条透明度（0~1）, 默认: 0.5 count : 线条的总数量, 默认: 150 zIndex : 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 不足CPU占用过高可以看看你现在的Cpu使用率，占用挺高的。 优化方法是减少线条的总数量，但是效果会有点折扣，我使用的是默认的配置。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2Fblog%2F2017%2F03%2F24%2Fhello%2F</url>
    <content type="text"><![CDATA[Reactnews头条新闻，兼容pc端和移动端项目技术架构 React React-router React-responsive ant-design fetch webpack 安装预览 安装相关依赖包1npm install 启动服务 1webpack-dev-server --contentbase src --inline --hot 目录结构 ├── node_modules // 项目相关依赖包 ├── index.html // 项目入口文件 ├── package.json // 项目配置文件 ├── src // 生产目录 │ ├── images // 图片资源 │ ├── css // 公共的css 资源 │ ├── js // 公共的js 资源 │ ├── components // 各种组件 ├── root.js //主界面 │ └── bundle.js // Webpack 预编译入口 实现的功能 注册/登陆 新闻详情页 个人中心 收藏列表 评论中心]]></content>
  </entry>
</search>